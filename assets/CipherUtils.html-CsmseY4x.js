import{_ as n,c as s,o as a,a as e}from"./app-H91pzQEi.js";const t={},p=e(`<h1 id="cipherutils" tabindex="-1"><a class="header-anchor" href="#cipherutils"><span>CipherUtils</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p><code>CipherUtils</code> 是 SecureApi 提供的加解密工具类，你可以在代码中使用它，来达到更个性化的加解密方式</p><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始"><span>开始</span></a></h2><p>初始化CipherUtils，参数你想使用的加密算法</p><blockquote><p>你可以采用单例模式等初始化一次全局使用</p></blockquote><blockquote><p>注意，如果你将它注册为Bean请不要取名cipherUtils，SecureApi内部已经注册了一个名为cipherUtils的Bean，会导致冲突，当然你也可以直接注入SecureApi提供的cipherUtils，但不要在SecureApi的配置文件中注入，此时cipherUtils还未初始化完成</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">CipherUtils</span> cipherUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CipherUtils</span><span class="token punctuation">(</span><span class="token class-name">CipherAlgorithmEnum</span><span class="token punctuation">.</span><span class="token constant">AES_CBC_PKCS5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// CipherUtils cipherUtils = new CipherUtils(CipherAlgorithmEnum.RSA_ECB_SHA256);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对称算法" tabindex="-1"><a class="header-anchor" href="#对称算法"><span>对称算法</span></a></h2><h3 id="生成密钥" tabindex="-1"><a class="header-anchor" href="#生成密钥"><span>生成密钥</span></a></h3><blockquote><p>上面我们选择的是 <code>AES_CBC_PKCS5</code> 对称算法，cipherUtils 会为我们生成对应算法的key，你可以指定 <code>seed</code> 来保证每次运行都生成相同的 key</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 生成 key</span></span>
<span class="line"><span class="token class-name">String</span> key <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomSecreteKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 生成偏移量（CBC模式需要，ECB模式不需要）</span></span>
<span class="line"><span class="token class-name">String</span> iv <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomIv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加密和解密" tabindex="-1"><a class="header-anchor" href="#加密和解密"><span>加密和解密</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;hello,您好！《》\\\\/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> encryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> decryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encryptString<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非对称算法" tabindex="-1"><a class="header-anchor" href="#非对称算法"><span>非对称算法</span></a></h2><h3 id="生成密钥-1" tabindex="-1"><a class="header-anchor" href="#生成密钥-1"><span>生成密钥</span></a></h3><blockquote><p>如果你选择的是 <code>RSA_ECB_SHA256</code> 非对称加密，那么我们需要生成密钥对</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 生成密钥对，RSA非对称加密只有ECB模式，所以不需要偏移量</span></span>
<span class="line"><span class="token class-name">RsaKeyPair</span> rsaKeyPair <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomRsaKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 用于加密</span></span>
<span class="line"><span class="token class-name">String</span> publicKey <span class="token operator">=</span> rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 用于解密</span></span>
<span class="line"><span class="token class-name">String</span> privateKey <span class="token operator">=</span> rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加密和解密-1" tabindex="-1"><a class="header-anchor" href="#加密和解密-1"><span>加密和解密</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;hello,您好！《》\\\\/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> encryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> decryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encryptString<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),l=[p];function i(c,o){return a(),s("div",null,l)}const u=n(t,[["render",i],["__file","CipherUtils.html.vue"]]),d=JSON.parse('{"path":"/CipherUtils.html","title":"CipherUtils","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"开始","slug":"开始","link":"#开始","children":[]},{"level":2,"title":"对称算法","slug":"对称算法","link":"#对称算法","children":[{"level":3,"title":"生成密钥","slug":"生成密钥","link":"#生成密钥","children":[]},{"level":3,"title":"加密和解密","slug":"加密和解密","link":"#加密和解密","children":[]}]},{"level":2,"title":"非对称算法","slug":"非对称算法","link":"#非对称算法","children":[{"level":3,"title":"生成密钥","slug":"生成密钥-1","link":"#生成密钥-1","children":[]},{"level":3,"title":"加密和解密","slug":"加密和解密-1","link":"#加密和解密-1","children":[]}]}],"git":{"updatedTime":1719467328000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":2}]},"filePathRelative":"CipherUtils.md"}');export{u as comp,d as data};
