import{_ as n,c as s,o as a,a as e}from"./app-CXhtqqwI.js";const p={},c=e(`<h1 id="两种模式" tabindex="-1"><a class="header-anchor" href="#两种模式"><span>两种模式</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>前面章节介绍的加密模式中，有 <code>common</code> 和 <code>session-key</code>，先说结论， <code>common</code> 更方便， <code>session-key</code> 更安全。</p><h2 id="common模式" tabindex="-1"><a class="header-anchor" href="#common模式"><span>common模式</span></a></h2><p><code>commom</code> 模式，需要前后端都保存一份相同的密钥或密钥对进行加解密。（接口加密不限于前后端，也可以是两台服务器通信，下面以前后端举例）</p><blockquote><p>举例：</p><ul><li>SecureApi 设置加密算法为 <code>AES</code> ，生成一个密钥，可以等待组件自动生成或使用 <code>CipherUtils</code> 生成，也可以使用在线网站生成，然后保存在 <code>SecureApiPropertiesConfig</code> 的 <code>key</code> 字段中，前端也保存此密钥，前端向后端发送使用该密钥加密后的数据，后端收到后用该密钥解密。</li></ul><p>缺点：</p><ul><li>密钥存在前端有泄露风险（客户端被黑、被F12调试）</li><li>密钥无法动态生成，需前后端商量好各自写死（明文密钥在网络中传输危险性大于存储在前端，需要接口加密的业务也绝对不会允许你在网络中传输明文密钥）</li></ul><p>优点：</p><ul><li>实现简单，无需关心密钥协商问题</li><li>性能高，密钥在前后端各自保存一份，无需额外的网络通信来协商密钥</li></ul></blockquote><h2 id="session-key模式" tabindex="-1"><a class="header-anchor" href="#session-key模式"><span>session-key模式</span></a></h2><p><code>session-key</code> 模式需要同时使用 <code>RSA</code> 和 <code>对称加密算法</code> 配合实现，由前端为每次请求生成新的 <code>对称加密密钥</code> （也可以每隔一段时间更新密钥），然后使用此密钥加密数据，再使用 <code>RSA</code> 公钥加密此密钥，把加密后的数据和密钥都传输给后端，后端使用 <code>RSA</code> 私钥解密得到 <code>会话密钥</code>，使用 <code>会话密钥</code> 解密数据，返回值就比较简单了，只需要使用 <code>会话密钥</code> 加密返回值给前端，前端使用 <code>会话密钥</code> 解密就可以了。</p><blockquote><p>举例：</p><ul><li>后端使用 SecureApi 设置加密模式为 <code>session-key</code> ，指定加密算法为 <code>RSA</code> ，指定会话密钥加密算法为 <code>AES</code> ，生成 <code>RSA</code> 密钥对，保存在 <code>SecureApiPropertiesConfig</code> 的 <code>publicKey</code> 和 <code>privateKey</code> 字段中</li><li>第一次通信：前端请求后端的 <code>RSA</code> 公钥</li><li>第二次通信：前端使用后端 <code>RSA</code> 公钥加密任意数据，把加密后的数据传输给后端，后端使用自己的 <code>RSA</code> 私钥解密，如果能解密成功，告诉前端校验成功，如果解密失败，除了代码原因，说明第一次通信公钥传输过程中被篡改，需要重新生成 <code>RSA</code> 密钥对重新验证</li><li>验证成功后，后续的的接口加密方式就是：前端为请求生成 <code>会话密钥</code>，使用 <code>会话密钥</code> 加密数据，再使用后端 <code>RSA</code> 公钥加密 <code>会话密钥</code>，把加密后的数据和密钥都传输给后端，后端可以写一个拦截器，把 <code>会话密钥</code> 保存到 <code>SecureApiPropertiesConfig</code> 的 <code>key</code> 字段中（无需自行解密），SecureApi 会自动使用 <code>RSA</code> 私钥解密得到 <code>会话密钥</code>，后续 SecureApi 也会自动使用 <code>会话密钥</code> 解密和加密数据了</li><li>你可以为每个请求生成一个不同的会话密钥，也可以定时更新密钥，后端的 RSA 密钥对也可以定期重新更新，以增强安全性</li></ul><p>缺点：</p><ul><li>可以看出，流程比较复杂</li><li>每次请求生成新密钥并且后端使用 <code>RSA</code> 私钥解密密钥显然会损失更多的性能</li></ul><p>优点：</p><ul><li>安全、安全、还是 TMD 安全</li></ul></blockquote><p>借助 SecureApi 实现 <code>session-key</code> 模式只需要下面简简单单的两个文件，代码示例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="SecureApi 配置文件"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">SecureApiPropertiesConfig</span> <span class="token function">secureApiPropertiesConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">SecureApiPropertiesConfig</span> secureApiPropertiesConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureApiPropertiesConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置模式为 session-key</span></span>
<span class="line">    secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token class-name">SecureApiProperties<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">SESSION_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置会话密钥算法</span></span>
<span class="line">    secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setSessionKeyCipherAlgorithm</span><span class="token punctuation">(</span><span class="token class-name">CipherAlgorithmEnum</span><span class="token punctuation">.</span><span class="token constant">AES_ECB_PKCS5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// session-key 模式必须设置加密算法为 RSA</span></span>
<span class="line">    secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setCipherAlgorithmEnum</span><span class="token punctuation">(</span><span class="token class-name">CipherAlgorithmEnum</span><span class="token punctuation">.</span><span class="token constant">RSA_ECB_SHA256</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 密钥可以不设置，组件会自动生成一个，并打印在控制台，如果需要手动生成，只需要使用组件提供的CipherUtils</span></span>
<span class="line">    <span class="token class-name">CipherUtils</span> cipherUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CipherUtils</span><span class="token punctuation">(</span><span class="token class-name">CipherAlgorithmEnum</span><span class="token punctuation">.</span><span class="token constant">RSA_ECB_SHA256</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getRandomRsaKeyPair(&quot;1&quot;)可传入seed参数，在测试时可用于控制每次生成的密钥相同</span></span>
<span class="line">    <span class="token class-name">RsaKeyPair</span> randomRsaKeyPair <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomRsaKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 把生成的密钥对设置到secureApiPropertiesConfig</span></span>
<span class="line">    secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setPublicKey</span><span class="token punctuation">(</span>randomRsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setPrivateKey</span><span class="token punctuation">(</span>randomRsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> secureApiPropertiesConfig<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在拦截器中把每次请求的 <code>会话密钥</code> 设置到 <code>secureApiPropertiesConfig</code> 的 <code>key</code> 值即可，后续操作全部由 SecureApi 自动完成</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="SessionKey 拦截器"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecureKeyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SecureKeyInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SecureApiPropertiesConfig</span> secureApiPropertiesConfig<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里只需要在拦截器中修改secureApiPropertiesConfig的key值即可，后续操作全部由 SecureApi 自动完成</span></span>
<span class="line">        <span class="token class-name">String</span> sessionKey <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;sessionKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;前端传来会话密钥：{}&quot;</span><span class="token punctuation">,</span> sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        secureApiPropertiesConfig<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span>sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[c];function t(i,l){return a(),s("div",null,o)}const r=n(p,[["render",t],["__file","两种模式.html.vue"]]),d=JSON.parse('{"path":"/%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F.html","title":"两种模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"common模式","slug":"common模式","link":"#common模式","children":[]},{"level":2,"title":"session-key模式","slug":"session-key模式","link":"#session-key模式","children":[]}],"git":{"updatedTime":1719545342000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":2}]},"filePathRelative":"两种模式.md"}');export{r as comp,d as data};
