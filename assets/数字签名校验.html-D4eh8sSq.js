import{_ as e,c as a,o as t,a as i}from"./app-0k54-YVc.js";const l={},s=i('<h1 id="数字签名校验" tabindex="-1"><a class="header-anchor" href="#数字签名校验"><span>数字签名校验</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>数字签名在信息安全领域扮演着至关重要的角色，其主要作用包括但不限于以下几个方面：</p><ul><li>数据完整性：数字签名能够确保信息在传输过程中未被篡改。如果接收方收到的数据与发送方发送的数据不一致（例如，在传输过程中被第三方修改），数字签名验证将会失败，从而提醒接收方数据的完整性已被破坏。</li><li>身份验证：数字签名可以用来验证消息确实来自于声称的发送者。因为只有拥有正确私钥的人才能生成有效的数字签名，所以签名的存在和有效性可以作为发送者身份的一个证明。</li><li>不可否认性：一旦某人用其私钥对信息进行了签名，他就不能否认这一行为。这是因为除了该私钥的所有者，其他任何人都无法生成正确的签名。这为交易、合同等提供了法律上的证据。</li><li>防止重放攻击：通过在签名中包含时间戳或其他唯一标识符，数字签名可以帮助防止重放攻击，即攻击者重复发送截获的信息以试图产生未经授权的影响。</li><li>增强信任：在电子商务和其他在线交易中，数字签名增加了双方之间的信任度。买家和卖家可以通过数字签名确认对方的身份，并确信交易条款不会被篡改。</li></ul><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h2><p>1、后端在配置中开启数字签名校验，可以不配置数字签名密钥，有自己自动生成并打印在控制台</p><p>2、前端使用第1步生成的数字签名私钥来对发送到接口的数据进行签名，并携带在请求头中的<code>X-signature</code>中（生成的签名时要注意后端是否开启了 isUrlSafe 配置，开启后前端生成的签名必须是 url safe 的）</p><p>3、后端的组件会自动使用公钥对<code>X-signature</code>签名进行校验</p><p>4、后端返回给前端的数据生成数字签名的方法是，在<code>Controller</code>中注入<code>RsaSignatureUtils</code>，调用<code>rsaSignatureUtils.sign(byte[] data)</code>方法</p>',9),c=[s];function n(o,r){return t(),a("div",null,c)}const h=e(l,[["render",n],["__file","数字签名校验.html.vue"]]),p=JSON.parse('{"path":"/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C.html","title":"数字签名校验","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"用法","slug":"用法","link":"#用法","children":[]}],"git":{"updatedTime":1743660252000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":2}]},"filePathRelative":"数字签名校验.md"}');export{h as comp,p as data};
