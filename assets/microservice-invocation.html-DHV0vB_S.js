import{_ as e}from"./微服务调用interface-0lo2KwMo.js";import{_ as t,c as o,o as i,a as r}from"./app-DmNAaaGY.js";const a={},c=r('<h1 id="microservice-invocation" tabindex="-1"><a class="header-anchor" href="#microservice-invocation"><span>Microservice Invocation</span></a></h1><ul><li>Microservices generally use <code>Dubbo</code> or <code>OpenFeign</code> for remote calls, as shown below, right? You can directly call the Interface method to call other microservices modules.</li></ul><figure><img src="'+e+'" alt="Microservice invocation interface" tabindex="0" loading="lazy"><figcaption>Microservice invocation interface</figcaption></figure><ul><li><p>At present, SecureApi cannot automatically encrypt the parameters on the interface method. The caller needs to manually encrypt the parameters and send a request, that is, @Autowired injects the <code>CipherUtils</code> manually encrypted str provided by SecureApi, and then calls the &quot;feign&quot; method to pass the encrypted &quot;str&quot; in.</p></li><li><p>Then the caller also introduces SecureApi. Each module of microservices sets the <em>same</em> encryption mode and key. There is no need for manual operation on the caller&#39;s side. Parameter decipher and return value encryption will be automated.</p></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>That is to say, the caller currently needs to manually encrypt parameters, and subsequent versions will add support for automatic encryption parameters for microservices calls. Coming soon...</p></div>',5),n=[c];function s(l,m){return i(),o("div",null,n)}const u=t(a,[["render",s],["__file","microservice-invocation.html.vue"]]),h=JSON.parse('{"path":"/en/microservice-invocation.html","title":"Microservice Invocation","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1720414013000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":1}]},"filePathRelative":"en/microservice-invocation.md"}');export{u as comp,h as data};
