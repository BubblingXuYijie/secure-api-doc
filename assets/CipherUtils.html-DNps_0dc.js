import{_ as n,c as a,o as s,a as e}from"./app-B6path-m.js";const t={},i=e(`<h1 id="cipherutils" tabindex="-1"><a class="header-anchor" href="#cipherutils"><span>CipherUtils</span></a></h1><h2 id="introduce" tabindex="-1"><a class="header-anchor" href="#introduce"><span>Introduce</span></a></h2><p><code>CipherUtils</code> is an encryption and decryption tool class provided by SecureApi. You can use it in your code to achieve more personalized encryption and decryption methods.</p><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>Start</span></a></h2><p>Initialize CipherUtils with the encryption algorithm you want to use.</p><blockquote><p>You can use singleton mode to initialize a global use.</p></blockquote><blockquote><p>Note that if you register it as a bean, please do not name it cipherUtils. SecureApi has registered a bean named cipherUtils internally, which will cause conflicts. Of course, you can also directly inject cipherUtils provided by SecureApi, but do not inject it in the SecureApi configuration file. At this time, cipherUtils has not been initialized, the injected cipherUtils encryption algorithm is the same as the encryption algorithm configured by SecureApi.</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">CipherUtils</span> cipherUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CipherUtils</span><span class="token punctuation">(</span><span class="token class-name">CipherAlgorithmEnum</span><span class="token punctuation">.</span><span class="token constant">AES_CBC_PKCS5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// CipherUtils cipherUtils = new CipherUtils(CipherAlgorithmEnum.RSA_ECB_SHA256);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="symmetric-algorithm" tabindex="-1"><a class="header-anchor" href="#symmetric-algorithm"><span>Symmetric algorithm</span></a></h2><h3 id="generate-key" tabindex="-1"><a class="header-anchor" href="#generate-key"><span>Generate key</span></a></h3><blockquote><p>Above we chose the &quot;AES_CBC_PKCS5&quot; symmetric algorithm, cipherUtils will generate the key of the corresponding algorithm for us, you can specify &quot;seed&quot; to ensure that the same key is generated every time you run it.</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// Generate key</span></span>
<span class="line"><span class="token class-name">String</span> key <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomSecreteKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Generate offsets (required for CBC model, not required for ECB mode)</span></span>
<span class="line"><span class="token class-name">String</span> iv <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomIv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encrypt-and-decrypt" tabindex="-1"><a class="header-anchor" href="#encrypt-and-decrypt"><span>Encrypt and decrypt</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;hello,您好！《》\\\\/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> encryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> decryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encryptString<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="asymmetric-algorithm" tabindex="-1"><a class="header-anchor" href="#asymmetric-algorithm"><span>Asymmetric algorithm</span></a></h2><h3 id="generate-key-1" tabindex="-1"><a class="header-anchor" href="#generate-key-1"><span>Generate key</span></a></h3><blockquote><p>If you choose RSA_ECB_SHA256 asymmetric encryption, then we need to generate a key pair</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// Generate key pairs, RSA asymmetric encryption only has ECB mode, so no offsets are required</span></span>
<span class="line"><span class="token class-name">RsaKeyPair</span> rsaKeyPair <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">getRandomRsaKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// For encrypt</span></span>
<span class="line"><span class="token class-name">String</span> publicKey <span class="token operator">=</span> rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// For decrypt</span></span>
<span class="line"><span class="token class-name">String</span> privateKey <span class="token operator">=</span> rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encrypt-and-decrypt-1" tabindex="-1"><a class="header-anchor" href="#encrypt-and-decrypt-1"><span>Encrypt and decrypt</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;hello,您好！《》\\\\/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> encryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> decryptString <span class="token operator">=</span> cipherUtils<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encryptString<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),p=[i];function c(l,o){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","CipherUtils.html.vue"]]),d=JSON.parse('{"path":"/en/CipherUtils.html","title":"CipherUtils","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduce","slug":"introduce","link":"#introduce","children":[]},{"level":2,"title":"Start","slug":"start","link":"#start","children":[]},{"level":2,"title":"Symmetric algorithm","slug":"symmetric-algorithm","link":"#symmetric-algorithm","children":[{"level":3,"title":"Generate key","slug":"generate-key","link":"#generate-key","children":[]},{"level":3,"title":"Encrypt and decrypt","slug":"encrypt-and-decrypt","link":"#encrypt-and-decrypt","children":[]}]},{"level":2,"title":"Asymmetric algorithm","slug":"asymmetric-algorithm","link":"#asymmetric-algorithm","children":[{"level":3,"title":"Generate key","slug":"generate-key-1","link":"#generate-key-1","children":[]},{"level":3,"title":"Encrypt and decrypt","slug":"encrypt-and-decrypt-1","link":"#encrypt-and-decrypt-1","children":[]}]}],"git":{"updatedTime":1720410897000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":3}]},"filePathRelative":"en/CipherUtils.md"}');export{u as comp,d as data};
