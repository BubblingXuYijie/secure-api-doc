import{_ as a,a as e,b as p,c as t,d as o,e as r,f as c,g as s,h as i,i as d,j as n}from"./测试param和form-data参数解密结果-Dr06dIkP.js";import{_ as l,c as m,o as h,a as g}from"./app-Dqhtw9pV.js";const _={},u=g('<h1 id="试一下" tabindex="-1"><a class="header-anchor" href="#试一下"><span>试一下</span></a></h1><p>好了各位大佬们，到了这里，配置以及完成，接下来可以进行效果体验了，后面有时间会提供前后端的 demo。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>本篇只是先体验功能，请务必和我的代码相同，不然也许你会遇到一些问题，代码里使用的注解等后续篇幅会介绍，可以解决你的疑惑。</p></div><h2 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目"><span>启动项目</span></a></h2><p>SecureApi的 <code>enable</code> 设置为 <code>true</code> 时，控制台会打印以下信息，代表开启接口加解密功能，我这里没有指定 key ，所以组件为我自动生成了，然后你可以把密钥设置到前端或者和前端进行密钥协商以追求更安全的传输。</p><p>建议测试的时候使用 <code>CipherUtils</code> 手动设置密钥，可以指定 <code>seed</code> 保证每次生成的密钥相同，更加方便。</p><p><img src="'+a+'" alt="img.png"></p><h2 id="返回值加密" tabindex="-1"><a class="header-anchor" href="#返回值加密"><span>返回值加密</span></a></h2><p>前面我们没有配置url匹配，需要在接口上或者接口所在类上添加 <code>@EncryptApi</code> 注解，即可实现返回值加密</p><p><img src="'+e+'" alt="img.png"></p><p>可以看到由于我开启了日志打印功能，控制台打印出一些信息</p><p><img src="'+p+'" alt="img.png"></p><p>接口返回的是一个json字符串，然后前端使用对应密钥解密这个字符串（注意这是个json字符串，前端处理时应该去除前后两端引号）就可以拿到 <code>{&quot;code&quot;:200,&quot;message&quot;:&quot;哈哈哈&quot;,&quot;data&quot;:null}</code> 这样的对象了</p><p><img src="'+t+'" alt="img.png"></p><h2 id="参数解密" tabindex="-1"><a class="header-anchor" href="#参数解密"><span>参数解密</span></a></h2><h3 id="body参数解密" tabindex="-1"><a class="header-anchor" href="#body参数解密"><span>Body参数解密</span></a></h3><p>组件可以对json参数体进行解密，这次我们传入上一步中加密的返回值，看一看解密结果，接口需要添加 <code>@DecryptApi</code> 注解，这样这个接口既会解密参数，也会加密返回值</p><p><img src="'+o+'" alt="img.png"></p><p><img src="'+r+'" alt="img.png"></p><p>可以看到密文参数正常解密为 <code>{&quot;code&quot;:200,&quot;message&quot;:&quot;哈哈哈&quot;,&quot;data&quot;:null}</code>,返回值也成功加密了</p><p><img src="'+c+'" alt="img.png"></p><h3 id="param和form-data参数解密" tabindex="-1"><a class="header-anchor" href="#param和form-data参数解密"><span>param和form-data参数解密</span></a></h3><p>这一次我们整复杂一点，各种类型的参数都整上，没有开启url匹配，我们要给字段加上 <code>@DecryptParam</code> 注解，注意 <code>@DecryptParam</code> 不能和 <code>@RequestParam</code> 同时使用，<code>@DecryptParam</code> 已经替代了后者功能。</p><p><img src="'+s+'" alt="img.png"></p><p>实体类本身不需要加注解，要加在里面的字段上，注意，没有加注解的字段不会解密（配置了url匹配的话，加不加注解全部字段都会解密）</p><p><img src="'+i+'" alt="img.png"></p><p>发送请求，请求中这些密文都是我提前用代码生成好的（注意，param里的密文要是url safe的），这些参数放在 <code>param</code> 里或者放在 <code>form-data</code> 里发送都是可以的</p><p><img src="'+d+'" alt="img.png"></p><p>成功解密加了注解的参数，没有加注解和为null的参数不解密</p><p><img src="'+n+'" alt="img.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>关于 <code>@DecryptApi</code> <code>@EncryptApi</code> <code>@DecryptParam</code> 注解的使用，请看下篇 <a href="%E6%B3%A8%E8%A7%A3">注解</a></p>',32),f=[u];function q(y,b){return h(),m("div",null,f)}const A=l(_,[["render",q],["__file","试一下.html.vue"]]),k=JSON.parse('{"path":"/%E8%AF%95%E4%B8%80%E4%B8%8B.html","title":"试一下","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"启动项目","slug":"启动项目","link":"#启动项目","children":[]},{"level":2,"title":"返回值加密","slug":"返回值加密","link":"#返回值加密","children":[]},{"level":2,"title":"参数解密","slug":"参数解密","link":"#参数解密","children":[{"level":3,"title":"Body参数解密","slug":"body参数解密","link":"#body参数解密","children":[]},{"level":3,"title":"param和form-data参数解密","slug":"param和form-data参数解密","link":"#param和form-data参数解密","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1719467328000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":2}]},"filePathRelative":"试一下.md"}');export{A as comp,k as data};
