import{_ as n,c as s,o as a,a as p}from"./app-Bb0aaVn7.js";const e={},t=p(`<h1 id="js示例" tabindex="-1"><a class="header-anchor" href="#js示例"><span>JS示例</span></a></h1><p>很多同学不知道如何与前端js进行配合，现在提供一下示例，示例采用 <code>crypto-js</code> 工具来进行</p><h2 id="安装-crypto-js" tabindex="-1"><a class="header-anchor" href="#安装-crypto-js"><span>安装 crypto-js</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> crypto-js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 ts 的项目还需要安装 @types/crypto-js，不然导入时会报红色</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> @types/crypto-js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="导入-crypto-js" tabindex="-1"><a class="header-anchor" href="#导入-crypto-js"><span>导入 crypto-js</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> CryptoJS <span class="token keyword">from</span> <span class="token string">&#39;crypto-js&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="生成-aes-随机密钥" tabindex="-1"><a class="header-anchor" href="#生成-aes-随机密钥"><span>生成 AES 随机密钥</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 对于 AES-256 使用 32，我们的 SecureApi 组件就是使用的 AES-256</span></span>
<span class="line"><span class="token keyword">const</span> key <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>WordArray<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// AES 的 IV 通常是 16 字节</span></span>
<span class="line"><span class="token keyword">const</span> iv <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>WordArray<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-aes-加密" tabindex="-1"><a class="header-anchor" href="#使用-aes-加密"><span>使用 AES 加密</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;hello,您好！《》\\\\/&#39;</span></span>
<span class="line"><span class="token keyword">const</span> encryptData <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加密后：&#39;</span> <span class="token operator">+</span> encryptData<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> decryptData <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>encryptData<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解密后：&#39;</span> <span class="token operator">+</span> encryptData<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 解密数据</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">data</span> 要解密的数据（base64）</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">AES_KEY</span> 密钥（base64）</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">IV</span> 偏移量（base64）</span>
<span class="line"> * <span class="token keyword">@return</span> 解密结果（UTF8字符串）</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token constant">AES_KEY</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token constant">IV</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> decrypt</span>
<span class="line">    <span class="token comment">// base64 形式的 key 和 iv 需要转换成 CryptoJS.lib.WordArray</span></span>
<span class="line">    <span class="token keyword">const</span> key <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">AES_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 传入 iv 的话走 CBC 模式，否则走 ECB 模式</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> iv <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">IV</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        decrypt <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            iv<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">CBC</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        decrypt <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">ECB</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> decrypt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 加密数据</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">data</span> 要加密的数据，必须是 String 类型，普通类型抓换为 String 使用 String(data)，对象使用 JSON.stringify(data)</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">AES_KEY</span> 密钥（base64）</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">IV</span> 偏移量（base64）</span>
<span class="line"> * <span class="token keyword">@return</span> 加密结果（base64）</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token constant">AES_KEY</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token constant">IV</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> encrypted</span>
<span class="line">    <span class="token keyword">const</span> key <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">AES_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> iv <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">IV</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        encrypted <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            iv<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">CBC</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        encrypted <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">ECB</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 加密默认返回的数据格式就是 base64</span></span>
<span class="line">    <span class="token keyword">return</span> encrypted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>后端 <code>SecureApi</code> 默认配置是 url safe 形式，而 <code>CryptoJS</code> 只能生成和处理普通 base64，所以你在前端生成的 key 、密文等都需要转换成 url safe 形式再发往后端，后端传来的 url safe 形式的 base64 你也要先还原成普通 base64 再给 <code>CryptoJS</code> 解密，当然，如果你关闭了 <code>SecureApi</code> 的 url safe 配置就不需要这些处理了</p></div><p>我会提供两个js方法示例来相互转换</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 生成的随机key</span></span>
<span class="line"><span class="token keyword">const</span> key <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>WordArray<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 编码为url safe base64</span></span>
<span class="line"><span class="token keyword">const</span> urlSafeBase64 <span class="token operator">=</span> <span class="token function">urlSafeBase64Encode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlSafeBase64<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 还原为普通base64</span></span>
<span class="line"><span class="token keyword">const</span> originBase64 <span class="token operator">=</span> <span class="token function">urlSafeBase64Decode</span><span class="token punctuation">(</span>urlSafeBase64<span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originBase64<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 把 url safe 的 base64 还原为普通 base64</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">url</span> safe 的 base64</span>
<span class="line"> * <span class="token keyword">@return</span> 普通 base64</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">urlSafeBase64Decode</span><span class="token punctuation">(</span><span class="token parameter">base64Str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base64Str<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> safeStr <span class="token operator">=</span> base64Str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">_</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> num <span class="token operator">=</span> safeStr<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> safeStr <span class="token operator">+</span> <span class="token string">&#39;====&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 把普通 base64 编码为 url safe 的 base64</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">普通</span> base64</span>
<span class="line"> * <span class="token keyword">@return</span> url safe 的 base64</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">urlSafeBase64Encode</span><span class="token punctuation">(</span><span class="token parameter">base64Str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base64Str<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> base64Str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码会打印下面结果，可以看到 “/” 和 “-” 已经替换为了符合 url 编码的字符，并且成功还原</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">YJA8eYYXFlUlNk/w+b/dY7aLofP2SYYszrwItDiHU1M<span class="token operator">=</span></span>
<span class="line">YJA8eYYXFlUlNk_w-b_dY7aLofP2SYYszrwItDiHU1M<span class="token operator">=</span></span>
<span class="line">YJA8eYYXFlUlNk/w+b/dY7aLofP2SYYszrwItDiHU1M<span class="token operator">=</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),c=[t];function l(o,i){return a(),s("div",null,c)}const r=n(e,[["render",l],["__file","JS示例.html.vue"]]),k=JSON.parse('{"path":"/JS%E7%A4%BA%E4%BE%8B.html","title":"JS示例","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装 crypto-js","slug":"安装-crypto-js","link":"#安装-crypto-js","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"导入 crypto-js","slug":"导入-crypto-js","link":"#导入-crypto-js","children":[]},{"level":3,"title":"生成 AES 随机密钥","slug":"生成-aes-随机密钥","link":"#生成-aes-随机密钥","children":[]},{"level":3,"title":"使用 AES 加密","slug":"使用-aes-加密","link":"#使用-aes-加密","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"updatedTime":1732694187000,"contributors":[{"name":"XuYijie","email":"1119461672@qq.com","commits":2}]},"filePathRelative":"JS示例.md"}');export{r as comp,k as data};
